import os
import csv
import subprocess
import shutil
import logging
from urllib.parse import urlparse
from dotenv import load_dotenv

# Load secrets from .env
load_dotenv()
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

# Logging setup
logging.basicConfig(
    filename='file_size_checker.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

INPUT_CSV = "urlTestGreater.csv"
OUTPUT_CSV = "large_files_report.csv"
TEMP_CLONE_DIR = "temp_clones"

os.makedirs(TEMP_CLONE_DIR, exist_ok=True)

def extract_repo_name(url):
    path_parts = urlparse(url).path.strip("/").split("/")
    return path_parts[-1] if len(path_parts) >= 2 else None

def clone_repo(repo_url, clone_dir):
    try:
        subprocess.run(
            ['git', 'clone', '--mirror', repo_url],
            cwd=clone_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=True
        )
        logging.info(f"CLONE SUCCESS: {repo_url}")
        return True
    except subprocess.CalledProcessError as e:
        logging.error(f"CLONE FAILED: {repo_url}, Error: {e}")
        return False

def run_git_sizer(repo_path):
    try:
        result = subprocess.run(
            ['git-sizer', '--verbose'],
            cwd=repo_path,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=True
        )
        return result.stdout.decode()
    except subprocess.CalledProcessError as e:
        logging.error(f"git-sizer failed in {repo_path}: {e}")
        return None

def main():
    with open(INPUT_CSV, newline='') as infile, open(OUTPUT_CSV, 'w', newline='') as outfile:
        reader = csv.reader(infile)
        writer = csv.writer(outfile)
        writer.writerow(["Repo URL", "Clone Status", "Large File Found", "Notes"])

        for row in reader:
            if not row:
                continue
            repo_url = row[0].strip()
            repo_name = extract_repo_name(repo_url)
            if not repo_name:
                logging.warning(f"Invalid repo URL: {repo_url}")
                writer.writerow([repo_url, "Invalid URL", "N/A", "Skipped"])
                continue

            clone_path = os.path.join(TEMP_CLONE_DIR, repo_name)

            if clone_repo(repo_url, TEMP_CLONE_DIR):
                sizer_output = run_git_sizer(clone_path)
                if sizer_output:
                    for line in sizer_output.splitlines():
                        if "blob" in line and "bytes" in line:
                            try:
                                size_bytes = int(line.strip().split()[-2].replace(",", ""))
                                if size_bytes > 400 * 1024 * 1024:
                                    writer.writerow([repo_url, "Success", "Yes", line.strip()])
                                    break
                            except Exception:
                                continue
                    else:
                        writer.writerow([repo_url, "Success", "No", "No large file detected"])
                else:
                    writer.writerow([repo_url, "Success", "Unknown", "git-sizer failed"])
            else:
                writer.writerow([repo_url, "Clone Failed", "N/A", "Git clone error"])

            # Delete repo after check
            if os.path.exists(clone_path):
                shutil.rmtree(clone_path, ignore_errors=True)
                logging.info(f"Deleted: {clone_path}")

if __name__ == "__main__":
    main()
